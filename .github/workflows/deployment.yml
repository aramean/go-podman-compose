name: go-continuous-deployment

on:
  workflow_run:
    workflows: ['go-continuous-integration-and-delivery']
    types:
      - completed
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
    
jobs:
  
  download:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Download
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
 
      - name: Remove
        uses: dev-drprasad/delete-tag-and-release@v0.2.0
        with:
          delete_release: true # default: false
          tag_name: v1.0.0 # tag name to delete
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Download artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: releasement.yml
          workflow_conclusion: success
          name: artifact-linux-amd64
          path: src/bin
      - run: ls src/bin

      - name: Cache Go binaries
        uses: actions/cache@v2
        id: restore-build
        with:
            path: src/bin
            key: ${{ github.sha }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [download]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Restore cached Go binaries
        uses: actions/cache@v2
        id: restore-build
        with:
          path: src/bin
          key: ${{ github.sha }}
      - run: ls src/bin
      
      - name: Zip Go binaries
        run: |
          cd src/bin/linux/amd64/ && zip podman-compose-linux-amd64.zip *

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0
          release_name: Release v1.0.0
          #tag_name: ${{ github.ref }}
          #release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true
  
      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: src/bin/linux/amd64/
          asset_name: podman-compose-linux-amd64.zip
          asset_content_type: application/zip
    
